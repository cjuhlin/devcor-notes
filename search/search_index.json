{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index These are some study notes taken while studying for DEVCOR certification.","title":"Index"},{"location":"#index","text":"These are some study notes taken while studying for DEVCOR certification.","title":"Index"},{"location":"Application%20Deployment%20and%20Security/app_deployment_security/","text":"","title":"App deployment security"},{"location":"Cisco%20Platforms/Webex/","text":"Webex","title":"Webex"},{"location":"Cisco%20Platforms/Webex/#webex","text":"","title":"Webex"},{"location":"Cisco%20Platforms/cisco_plattform/","text":"","title":"Cisco plattform"},{"location":"Infrastructure%20and%20Automation/infra_automation/","text":"","title":"Infra automation"},{"location":"Software%20Development%20and%20Design/Caching/","text":"#cache Caching General Caching may be implemented at different places; at the client(ex web-browser), local proxy server, server-side reverse proxy, or as part of API gateway. Stale is a state when the expiration time has expired for the cache. Check if the cache has expired when the state is \"Stale\" and needs to be validated if the cache is still up to date. Validate method : Date/timestamp: Last-Modified Header. ETag: revision number or hash of the content in an ETag header.","title":"Caching"},{"location":"Software%20Development%20and%20Design/Caching/#caching","text":"","title":"Caching"},{"location":"Software%20Development%20and%20Design/Caching/#general","text":"Caching may be implemented at different places; at the client(ex web-browser), local proxy server, server-side reverse proxy, or as part of API gateway. Stale is a state when the expiration time has expired for the cache. Check if the cache has expired when the state is \"Stale\" and needs to be validated if the cache is still up to date. Validate method : Date/timestamp: Last-Modified Header. ETag: revision number or hash of the content in an ETag header.","title":"General"},{"location":"Software%20Development%20and%20Design/Database/","text":"#database Database ACID Atomicity All operations in the transaction must succeed otherwise it will rollback Consistency Transaction results invalid state of the database, all validation and constraints are met. Isolation Transactions do not contend with one other. The transactions run sequentially. Durability The result of a transaction is permanent even in the presence of failures. Base Is variant to ACID Basically available Reading and writing operations are available as much as possible (using all nodes of a database cluster), but might not be consistent (they write might not persist after conflicts are reconciled, the reader might not get the latest write) Soft state Without consistency guarantees, after some amount of time, we only have some probability of knowing the state, since it might not yet have converged Eventual consistency If we execute some writes and then the system functions long enough, we can know the state of the data; any further reads of that data item will return the same value CAP The model is used for a distributed database when is stored on multiple nodes. Only two of these three can be true at the same time. Consistency Every read receives the most recent write or error Availability Every request receives a (non-error) response, without a guarantee that it contains the most recent write. Partition tolerance The database continues to operate even if an arbitrary number of messages were dropped by the network between nodes. Conslusion When a network fails the database becomes partitioned(out of sync with each other), and can it can do one of the following: Ensure consistency and decrease availability by canceling the operation. Ensure availability but risk inconsistency by proceeding with the operation. #needtofix Rewrite the above with my own words. Different type of database Relational database Use #cap (without p) and #acid . When Best for structured data and querying structured data Document oriented database When Serialize database When Graph database Column oriented database Key oriented database example MongoDB Time-Series database When Best suited when handling data that comes with dates/time like logs. Using telemetry information. Popular to use when building dashboards. #needtofix More examples and why","title":"Database"},{"location":"Software%20Development%20and%20Design/Database/#database","text":"","title":"Database"},{"location":"Software%20Development%20and%20Design/Database/#acid","text":"","title":"ACID"},{"location":"Software%20Development%20and%20Design/Database/#atomicity","text":"All operations in the transaction must succeed otherwise it will rollback","title":"Atomicity"},{"location":"Software%20Development%20and%20Design/Database/#consistency","text":"Transaction results invalid state of the database, all validation and constraints are met.","title":"Consistency"},{"location":"Software%20Development%20and%20Design/Database/#isolation","text":"Transactions do not contend with one other. The transactions run sequentially.","title":"Isolation"},{"location":"Software%20Development%20and%20Design/Database/#durability","text":"The result of a transaction is permanent even in the presence of failures.","title":"Durability"},{"location":"Software%20Development%20and%20Design/Database/#base","text":"Is variant to ACID","title":"Base"},{"location":"Software%20Development%20and%20Design/Database/#basically-available","text":"Reading and writing operations are available as much as possible (using all nodes of a database cluster), but might not be consistent (they write might not persist after conflicts are reconciled, the reader might not get the latest write)","title":"Basically available"},{"location":"Software%20Development%20and%20Design/Database/#soft-state","text":"Without consistency guarantees, after some amount of time, we only have some probability of knowing the state, since it might not yet have converged","title":"Soft state"},{"location":"Software%20Development%20and%20Design/Database/#eventual-consistency","text":"If we execute some writes and then the system functions long enough, we can know the state of the data; any further reads of that data item will return the same value","title":"Eventual consistency"},{"location":"Software%20Development%20and%20Design/Database/#cap","text":"The model is used for a distributed database when is stored on multiple nodes. Only two of these three can be true at the same time.","title":"CAP"},{"location":"Software%20Development%20and%20Design/Database/#consistency_1","text":"Every read receives the most recent write or error","title":"Consistency"},{"location":"Software%20Development%20and%20Design/Database/#availability","text":"Every request receives a (non-error) response, without a guarantee that it contains the most recent write.","title":"Availability"},{"location":"Software%20Development%20and%20Design/Database/#partition-tolerance","text":"The database continues to operate even if an arbitrary number of messages were dropped by the network between nodes.","title":"Partition tolerance"},{"location":"Software%20Development%20and%20Design/Database/#conslusion","text":"When a network fails the database becomes partitioned(out of sync with each other), and can it can do one of the following: Ensure consistency and decrease availability by canceling the operation. Ensure availability but risk inconsistency by proceeding with the operation. #needtofix Rewrite the above with my own words.","title":"Conslusion"},{"location":"Software%20Development%20and%20Design/Database/#different-type-of-database","text":"","title":"Different type of database"},{"location":"Software%20Development%20and%20Design/Database/#relational-database","text":"Use #cap (without p) and #acid .","title":"Relational database"},{"location":"Software%20Development%20and%20Design/Database/#when","text":"Best for structured data and querying structured data","title":"When"},{"location":"Software%20Development%20and%20Design/Database/#document-oriented-database","text":"","title":"Document oriented database"},{"location":"Software%20Development%20and%20Design/Database/#when_1","text":"","title":"When"},{"location":"Software%20Development%20and%20Design/Database/#serialize-database","text":"","title":"Serialize database"},{"location":"Software%20Development%20and%20Design/Database/#when_2","text":"","title":"When"},{"location":"Software%20Development%20and%20Design/Database/#graph-database","text":"","title":"Graph database"},{"location":"Software%20Development%20and%20Design/Database/#column-oriented-database","text":"","title":"Column oriented database"},{"location":"Software%20Development%20and%20Design/Database/#key-oriented-database","text":"example MongoDB","title":"Key oriented database"},{"location":"Software%20Development%20and%20Design/Database/#time-series-database","text":"","title":"Time-Series database"},{"location":"Software%20Development%20and%20Design/Database/#when_3","text":"Best suited when handling data that comes with dates/time like logs. Using telemetry information. Popular to use when building dashboards. #needtofix More examples and why","title":"When"},{"location":"Software%20Development%20and%20Design/Event-driven/","text":"Event Broker Event Mediator Breaks down an event to multiple events to send to different queues","title":"Event driven"},{"location":"Software%20Development%20and%20Design/Event-driven/#event-broker","text":"","title":"Event Broker"},{"location":"Software%20Development%20and%20Design/Event-driven/#event-mediator","text":"Breaks down an event to multiple events to send to different queues","title":"Event Mediator"},{"location":"Software%20Development%20and%20Design/Git/","text":"#Git Git General Use snapshots to keep track of the state of the folders and files metadata with information about timestamps when things changed and author. Use graph tree model. tree = folder files = blob Snapshots is referring to parent snapshots. pseudo-code of git : type blob : array<byte> type tree : map<string , tree | blob> type commit : struct { parents : array of commits author : string message : string snapshot: tree } type object : blob | tree | commit objects : map <string,object> def store(o) id = sha1(o) object(id) = o def load(id) return object(id) everything is a reference to sha1 id in snapshots, so snapshot is a reference to the hash of the other snapshot in the commit. Same with parents. git is immutable The Head is pointing to the last snapshot Commands git ... commit -a Will add all files that are modified to the commit instead of using the add command to add files manually that should be used in the commit. log Can visualize the commit history of the repo. reset Use this if you haven't pushed the repo to the remote, modify the history. So it will be out of sync if you have pushed the changed remote and try using it locally then try to push it remote again. Use revert instead of in this case. HEAD git reset HEAD <file> to unstage the file that you have added with git add <file> before commit git reset HEAD^ = reset one head git reset HEAD~1 = reset one head as well. But can change 1 to 2 to jump 2 steps. revert Use this if you have pushed your change remote, doesn't modify the history. rebase branch git branch will show all the branches git branch <name> will create a branch with that name checkout Move around between the commits in the history. git checkout <file> will undo the changes to the last state in the HEAD snapshot of that <file> . git checkout <hash> -- <file> will revert the file to that commit state. merge If the branch is based on the branch we are going to merge it in, then it will just fast-forward and no conflict should happen if no commit has happened to the branch you are going to merge it into. diff git diff <file> Showing what has been changed to that file. status Just tell what is happening right now in the repo. Resource MIT git lecture","title":"Git"},{"location":"Software%20Development%20and%20Design/Git/#git","text":"","title":"Git"},{"location":"Software%20Development%20and%20Design/Git/#general","text":"Use snapshots to keep track of the state of the folders and files metadata with information about timestamps when things changed and author. Use graph tree model. tree = folder files = blob Snapshots is referring to parent snapshots. pseudo-code of git : type blob : array<byte> type tree : map<string , tree | blob> type commit : struct { parents : array of commits author : string message : string snapshot: tree } type object : blob | tree | commit objects : map <string,object> def store(o) id = sha1(o) object(id) = o def load(id) return object(id) everything is a reference to sha1 id in snapshots, so snapshot is a reference to the hash of the other snapshot in the commit. Same with parents. git is immutable The Head is pointing to the last snapshot","title":"General"},{"location":"Software%20Development%20and%20Design/Git/#commands","text":"git ...","title":"Commands"},{"location":"Software%20Development%20and%20Design/Git/#commit","text":"-a Will add all files that are modified to the commit instead of using the add command to add files manually that should be used in the commit.","title":"commit"},{"location":"Software%20Development%20and%20Design/Git/#log","text":"Can visualize the commit history of the repo.","title":"log"},{"location":"Software%20Development%20and%20Design/Git/#reset","text":"Use this if you haven't pushed the repo to the remote, modify the history. So it will be out of sync if you have pushed the changed remote and try using it locally then try to push it remote again. Use revert instead of in this case.","title":"reset"},{"location":"Software%20Development%20and%20Design/Git/#head","text":"git reset HEAD <file> to unstage the file that you have added with git add <file> before commit git reset HEAD^ = reset one head git reset HEAD~1 = reset one head as well. But can change 1 to 2 to jump 2 steps.","title":"HEAD"},{"location":"Software%20Development%20and%20Design/Git/#revert","text":"Use this if you have pushed your change remote, doesn't modify the history.","title":"revert"},{"location":"Software%20Development%20and%20Design/Git/#rebase","text":"","title":"rebase"},{"location":"Software%20Development%20and%20Design/Git/#branch","text":"git branch will show all the branches git branch <name> will create a branch with that name","title":"branch"},{"location":"Software%20Development%20and%20Design/Git/#checkout","text":"Move around between the commits in the history. git checkout <file> will undo the changes to the last state in the HEAD snapshot of that <file> . git checkout <hash> -- <file> will revert the file to that commit state.","title":"checkout"},{"location":"Software%20Development%20and%20Design/Git/#merge","text":"If the branch is based on the branch we are going to merge it in, then it will just fast-forward and no conflict should happen if no commit has happened to the branch you are going to merge it into.","title":"merge"},{"location":"Software%20Development%20and%20Design/Git/#diff","text":"git diff <file> Showing what has been changed to that file.","title":"diff"},{"location":"Software%20Development%20and%20Design/Git/#status","text":"Just tell what is happening right now in the repo.","title":"status"},{"location":"Software%20Development%20and%20Design/Git/#resource","text":"MIT git lecture","title":"Resource"},{"location":"Software%20Development%20and%20Design/High%20availabilty/","text":"#highavailabilty #availabilty High availability Singel point of failure It's important to build redundancy into the system so that if one part fails everything doesn't fail. Reliable failover When something fails it should switch over to a working instance instead of completely failing. Detection of failures as they occur Monitoring the system health so that the traffic doesn't go to a node that is down. One thing to use here is a load balancer . But you should also have a monitoring system to get an alarm when something goes down or other issues with the node.","title":"High availabilty"},{"location":"Software%20Development%20and%20Design/High%20availabilty/#high-availability","text":"","title":"High availability"},{"location":"Software%20Development%20and%20Design/High%20availabilty/#singel-point-of-failure","text":"It's important to build redundancy into the system so that if one part fails everything doesn't fail.","title":"Singel point of failure"},{"location":"Software%20Development%20and%20Design/High%20availabilty/#reliable-failover","text":"When something fails it should switch over to a working instance instead of completely failing.","title":"Reliable failover"},{"location":"Software%20Development%20and%20Design/High%20availabilty/#detection-of-failures-as-they-occur","text":"Monitoring the system health so that the traffic doesn't go to a node that is down. One thing to use here is a load balancer . But you should also have a monitoring system to get an alarm when something goes down or other issues with the node.","title":"Detection of failures as they occur"},{"location":"Software%20Development%20and%20Design/Latency/","text":"#latency Latency To reduce latency you can use load balancer and do stuff on the client-side instead of the server. Like, generate the frontend on the client instead of everything on the server-side. Then let the backend just serve the static files. Then the client can use API to make a call to the backend to execute application logic on the frontend. (* In the above text we are talking about web applications. Different types of latency Application latency Latency is caused by the application. It can be minimized if you try to optimize your code where bottlenecks are occurring example functions that take a long time to perform a database query or calculation of something. If you using a language that compiles you can try to optimize the compiler to see if it helps. OS and TCP stack latency Latency that occurs in the OS when processing the request. Use an OS that reduces the latency to improve the latency. NIC latency How long time a packet spends in the interface queue and put into physical wiring for transferring. So choose a network card and speed that are necessary for the application to perform as it should. Cable latency Depending on what kind of cable and distance is used between the server and the client, it can create extra latency. Port to Port Latency The network devices the packet is going through, if possible you can use better hardware to make the latency go down or make sure is going through so few network devices as possible between the server and the client. Application optimization There is some stuff you can do to optimize the application to reduce the latency, such as: Content delivery network or local cache It will reduce the latency for the end-user if there are different content delivery networks in different regions so the user will connect to the closest server that provides the same content. Resource Loading Use pagination so it will make smaller calls so you don't need to get all the data at the same time it will speed up everything and also use lazy loading .","title":"Latency"},{"location":"Software%20Development%20and%20Design/Latency/#latency","text":"To reduce latency you can use load balancer and do stuff on the client-side instead of the server. Like, generate the frontend on the client instead of everything on the server-side. Then let the backend just serve the static files. Then the client can use API to make a call to the backend to execute application logic on the frontend. (* In the above text we are talking about web applications.","title":"Latency"},{"location":"Software%20Development%20and%20Design/Latency/#different-types-of-latency","text":"","title":"Different types of latency"},{"location":"Software%20Development%20and%20Design/Latency/#application-latency","text":"Latency is caused by the application. It can be minimized if you try to optimize your code where bottlenecks are occurring example functions that take a long time to perform a database query or calculation of something. If you using a language that compiles you can try to optimize the compiler to see if it helps.","title":"Application latency"},{"location":"Software%20Development%20and%20Design/Latency/#os-and-tcp-stack-latency","text":"Latency that occurs in the OS when processing the request. Use an OS that reduces the latency to improve the latency.","title":"OS and TCP stack latency"},{"location":"Software%20Development%20and%20Design/Latency/#nic-latency","text":"How long time a packet spends in the interface queue and put into physical wiring for transferring. So choose a network card and speed that are necessary for the application to perform as it should.","title":"NIC latency"},{"location":"Software%20Development%20and%20Design/Latency/#cable-latency","text":"Depending on what kind of cable and distance is used between the server and the client, it can create extra latency.","title":"Cable latency"},{"location":"Software%20Development%20and%20Design/Latency/#port-to-port-latency","text":"The network devices the packet is going through, if possible you can use better hardware to make the latency go down or make sure is going through so few network devices as possible between the server and the client.","title":"Port to Port Latency"},{"location":"Software%20Development%20and%20Design/Latency/#application-optimization","text":"There is some stuff you can do to optimize the application to reduce the latency, such as:","title":"Application optimization"},{"location":"Software%20Development%20and%20Design/Latency/#content-delivery-network-or-local-cache","text":"It will reduce the latency for the end-user if there are different content delivery networks in different regions so the user will connect to the closest server that provides the same content.","title":"Content delivery network or local cache"},{"location":"Software%20Development%20and%20Design/Latency/#resource","text":"","title":"Resource"},{"location":"Software%20Development%20and%20Design/Latency/#loading","text":"Use pagination so it will make smaller calls so you don't need to get all the data at the same time it will speed up everything and also use lazy loading .","title":"Loading"},{"location":"Software%20Development%20and%20Design/Load%20balancer/","text":"#loadbalancer #lb Load balancer (LB) A load balancer is a server that is before the application server. It makes it easier to manage application that is running on multiple instances instead of a single instance. You set the IP for accessing the application on the load balancer instead of the application server and let the load balance route the traffic to the right server. You can use something that calls global server load balancing if you have users all over the world. So if you deploy a load balancer in each region then you can configure it so that the user will connect to the LB with the lowest latency instead of getting a response from a server on the other side of the world. Pros High availability and reliability Check servers healthy before routing the traffic to the server, so if a server is offline it will send it to another server that is online instead. Reduced downtime A single server will not take down everything if something is wrong because of the above point. Scalabilty / Flexibility Easy to add more servers behind the LB to scale Efficiency Different types of load balancing, you can configure the LB to balance the traffic after how much traffic, response time, and more.","title":"Load balancer"},{"location":"Software%20Development%20and%20Design/Load%20balancer/#load-balancer-lb","text":"A load balancer is a server that is before the application server. It makes it easier to manage application that is running on multiple instances instead of a single instance. You set the IP for accessing the application on the load balancer instead of the application server and let the load balance route the traffic to the right server. You can use something that calls global server load balancing if you have users all over the world. So if you deploy a load balancer in each region then you can configure it so that the user will connect to the LB with the lowest latency instead of getting a response from a server on the other side of the world.","title":"Load balancer (LB)"},{"location":"Software%20Development%20and%20Design/Load%20balancer/#pros","text":"High availability and reliability Check servers healthy before routing the traffic to the server, so if a server is offline it will send it to another server that is online instead. Reduced downtime A single server will not take down everything if something is wrong because of the above point. Scalabilty / Flexibility Easy to add more servers behind the LB to scale Efficiency Different types of load balancing, you can configure the LB to balance the traffic after how much traffic, response time, and more.","title":"Pros"},{"location":"Software%20Development%20and%20Design/Microservices/","text":"#microservices Microservices","title":"Microservices"},{"location":"Software%20Development%20and%20Design/Microservices/#microservices","text":"","title":"Microservices"},{"location":"Software%20Development%20and%20Design/Modular/","text":"#modular #design Modular Pros More flexible Easier to break down everything into smaller stones, which is perfect for a project so everything doesn't need to be one giant project, and instead you can break it down into smaller projects. Code is easier to understand, debugging, and test. The code is easier to clean up (refactor) Also, applies to microservice. Each service has one job (ex. One service is the frontend and one is the backend ) They communicate with each other over a standard API interface. Can easily be reused for other applications with no change to the application. Easier to scale","title":"Modular"},{"location":"Software%20Development%20and%20Design/Modular/#modular","text":"","title":"Modular"},{"location":"Software%20Development%20and%20Design/Modular/#pros","text":"More flexible Easier to break down everything into smaller stones, which is perfect for a project so everything doesn't need to be one giant project, and instead you can break it down into smaller projects. Code is easier to understand, debugging, and test. The code is easier to clean up (refactor) Also, applies to microservice. Each service has one job (ex. One service is the frontend and one is the backend ) They communicate with each other over a standard API interface. Can easily be reused for other applications with no change to the application. Easier to scale","title":"Pros"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/","text":"#monolith #single #application Monolith application Monolith application is one single big application. Everything is on one node, the whole application; the presentation, the logic, and the database interface. Designed to do every step in the process without using external services. Pros Easier to deploy Because everything is one single unit that is going to be installed on one node it makes it easier to deploy, just install it on the node with all the requirements, and is done. Lower Latency Because everything is on the same node everything takes less time for the application to communicate with everything internal. Cons Too big When the application is too big it will make it harder to manage. Redeploy Need to redeploy the whole thing when making small changes (single file application mostly) Scaling If some component in the application hugs up the resource it will be harder to deploy the application to multiple servers to scale. You will also need to deploy the whole application to the new nodes not only part of the application that is needed that extra resource. But if the application was broken into microservices then you could just do horizontally scaling and deploy the microservice on the new nodes. Only one codebase The whole application needs to be done in one language. So sometimes for a certain task that chosen language is maybe not best suited for the job example C++ maybe not be so great for web frontend but better for some backend stuff.","title":"Monolith applications"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#monolith-application","text":"Monolith application is one single big application. Everything is on one node, the whole application; the presentation, the logic, and the database interface. Designed to do every step in the process without using external services.","title":"Monolith application"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#pros","text":"","title":"Pros"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#easier-to-deploy","text":"Because everything is one single unit that is going to be installed on one node it makes it easier to deploy, just install it on the node with all the requirements, and is done.","title":"Easier to deploy"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#lower-latency","text":"Because everything is on the same node everything takes less time for the application to communicate with everything internal.","title":"Lower Latency"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#cons","text":"","title":"Cons"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#too-big","text":"When the application is too big it will make it harder to manage.","title":"Too big"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#redeploy","text":"Need to redeploy the whole thing when making small changes (single file application mostly)","title":"Redeploy"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#scaling","text":"If some component in the application hugs up the resource it will be harder to deploy the application to multiple servers to scale. You will also need to deploy the whole application to the new nodes not only part of the application that is needed that extra resource. But if the application was broken into microservices then you could just do horizontally scaling and deploy the microservice on the new nodes.","title":"Scaling"},{"location":"Software%20Development%20and%20Design/Monolith%20applications/#only-one-codebase","text":"The whole application needs to be done in one language. So sometimes for a certain task that chosen language is maybe not best suited for the job example C++ maybe not be so great for web frontend but better for some backend stuff.","title":"Only one codebase"},{"location":"Software%20Development%20and%20Design/Observability/","text":"#observability Observability Three pillar Logs Metrics Tracing Tracing use unique id for every event together with information regarding: which service did a request go through? what did every microservice do when processing the request? if the request was slow where was the bottleneck? if the request failed, where did the error occur? How different was the execution of the request from the normal behavior of the system","title":"Observability"},{"location":"Software%20Development%20and%20Design/Observability/#observability","text":"","title":"Observability"},{"location":"Software%20Development%20and%20Design/Observability/#three-pillar","text":"","title":"Three pillar"},{"location":"Software%20Development%20and%20Design/Observability/#logs","text":"","title":"Logs"},{"location":"Software%20Development%20and%20Design/Observability/#metrics","text":"","title":"Metrics"},{"location":"Software%20Development%20and%20Design/Observability/#tracing","text":"Tracing use unique id for every event together with information regarding: which service did a request go through? what did every microservice do when processing the request? if the request was slow where was the bottleneck? if the request failed, where did the error occur? How different was the execution of the request from the normal behavior of the system","title":"Tracing"},{"location":"Software%20Development%20and%20Design/Pagination/","text":"#pagination Pagination Pros with paginations Improving response times Saving resource because smaller payloads Different types Offset/Page The client can use offset= and limit= example https://exampel.com/article?offset=100&limit=20 Will return 20 entries starting from 100. Cons Problem if entries get added or deleted. So if an entries get deleted on some page it will cause entries to move to the previous page instead. It called page drift. When dealing with large offset the API would scan through all of the offset and discard them. Cursor- or keyset Use some \"key\" value to indicate an starting item. Like dates. This will solve the problem that Offset Page has. Example https://exampel.com/article?max=20&before=2022-01-14 Will get 20 entries before 2022-01-14 Metadata Another way is for the API to return metadata with information about pagination Example: https://example.com/fruits returns : \"items\": [\"Apple\",\"Banana\",\"Orange\"], \"paging\": { \"offset\" : 0, \"limit\" : 3, \"count\" : 42, \"prev\" : [] \"next\" : [\"https://example.com/fruits?offset=4&limit=3\",xxxx,xxxx,xxxx], \"pages\" : 14 }","title":"Pagination"},{"location":"Software%20Development%20and%20Design/Pagination/#pagination","text":"","title":"Pagination"},{"location":"Software%20Development%20and%20Design/Pagination/#pros-with-paginations","text":"Improving response times Saving resource because smaller payloads","title":"Pros with paginations"},{"location":"Software%20Development%20and%20Design/Pagination/#different-types","text":"","title":"Different types"},{"location":"Software%20Development%20and%20Design/Pagination/#offsetpage","text":"The client can use offset= and limit= example https://exampel.com/article?offset=100&limit=20 Will return 20 entries starting from 100.","title":"Offset/Page"},{"location":"Software%20Development%20and%20Design/Pagination/#cons","text":"Problem if entries get added or deleted. So if an entries get deleted on some page it will cause entries to move to the previous page instead. It called page drift. When dealing with large offset the API would scan through all of the offset and discard them.","title":"Cons"},{"location":"Software%20Development%20and%20Design/Pagination/#cursor-or-keyset","text":"Use some \"key\" value to indicate an starting item. Like dates. This will solve the problem that Offset Page has. Example https://exampel.com/article?max=20&before=2022-01-14 Will get 20 entries before 2022-01-14","title":"Cursor- or keyset"},{"location":"Software%20Development%20and%20Design/Pagination/#metadata","text":"Another way is for the API to return metadata with information about pagination Example: https://example.com/fruits returns : \"items\": [\"Apple\",\"Banana\",\"Orange\"], \"paging\": { \"offset\" : 0, \"limit\" : 3, \"count\" : 42, \"prev\" : [] \"next\" : [\"https://example.com/fruits?offset=4&limit=3\",xxxx,xxxx,xxxx], \"pages\" : 14 }","title":"Metadata"},{"location":"Software%20Development%20and%20Design/Resilence/","text":"#resilence Resilience The capacity to recover quickly from difficulties; toughness. Types Parameters checking Complete parameters checking in functions and objects to protect from broken and malicious calls. Timeouts Timeout should be trimmed so the request isn't taking a too long time but also allowing slower response for stuff that takes some longer time than other functions. Asynchronous communications Is used to decouple the sender from the receiver and prevent failure dues to failing/slow resources. Fan out and use the quickest response Used to send many requests and the first, quickest reply is used. The other request is discarded, this is wasteful of resources. Fail fast If the application knows that something will fail, it should fail fast so it will not use resources for no reason. Circuit breaker Is a variant of fail fast . If a call fails multiple times a circuit breaker will take that resource offline and return an error on the next attempt. Retries Used to repeat the same operation multiple times and hope that it will work around temporary network problems or system problems. Important to know is that if the operation that you are trying to retry is resourced heavy it will just make everything worst for the system that is going to process the operation. Fallback mechanism Fallback to a default value or cached value if possible. Sometimes this is not possible because of the nature of the requested data example if a credit card is valid or not.","title":"Resilence"},{"location":"Software%20Development%20and%20Design/Resilence/#resilience","text":"The capacity to recover quickly from difficulties; toughness.","title":"Resilience"},{"location":"Software%20Development%20and%20Design/Resilence/#types","text":"","title":"Types"},{"location":"Software%20Development%20and%20Design/Resilence/#parameters-checking","text":"Complete parameters checking in functions and objects to protect from broken and malicious calls.","title":"Parameters checking"},{"location":"Software%20Development%20and%20Design/Resilence/#timeouts","text":"Timeout should be trimmed so the request isn't taking a too long time but also allowing slower response for stuff that takes some longer time than other functions.","title":"Timeouts"},{"location":"Software%20Development%20and%20Design/Resilence/#asynchronous-communications","text":"Is used to decouple the sender from the receiver and prevent failure dues to failing/slow resources.","title":"Asynchronous communications"},{"location":"Software%20Development%20and%20Design/Resilence/#fan-out-and-use-the-quickest-response","text":"Used to send many requests and the first, quickest reply is used. The other request is discarded, this is wasteful of resources.","title":"Fan out and use the quickest response"},{"location":"Software%20Development%20and%20Design/Resilence/#fail-fast","text":"If the application knows that something will fail, it should fail fast so it will not use resources for no reason.","title":"Fail fast"},{"location":"Software%20Development%20and%20Design/Resilence/#circuit-breaker","text":"Is a variant of fail fast . If a call fails multiple times a circuit breaker will take that resource offline and return an error on the next attempt.","title":"Circuit breaker"},{"location":"Software%20Development%20and%20Design/Resilence/#retries","text":"Used to repeat the same operation multiple times and hope that it will work around temporary network problems or system problems. Important to know is that if the operation that you are trying to retry is resourced heavy it will just make everything worst for the system that is going to process the operation.","title":"Retries"},{"location":"Software%20Development%20and%20Design/Resilence/#fallback-mechanism","text":"Fallback to a default value or cached value if possible. Sometimes this is not possible because of the nature of the requested data example if a credit card is valid or not.","title":"Fallback mechanism"},{"location":"Software%20Development%20and%20Design/SOLID/","text":"#SOLID SOLID S.O.L.I.D Single responsibilty Make things (classes, functions, etc.) responsible for fulfilling one type of role. e.g. Refactor code responsibilities into separate classes. For example, if you have a shop and make a purchase. Then the first thing you need is to make an order and then payment. So in this case the order handling like what item and how many and what price can be part of the order class but the payment should be separated from the order class. This is because if you example you want to add other payment methods to the shop you only need to change the payment class to support additional payment methods. Open-closed principle Be able to add new functionality to existing code easily without modifying existing code. e.g. Use abstract classes. These can define what subclasses will require and strengthen Principle 1. by separating code duties. For example, you have a payment processor to handle payment as a class, so if you want to add a new payment method you create a subclass of the payment processor for that payment option instead of modifying the payment processor class with the payment method. Liskov substitution principle When a class inherits from another class, the program shouldn't break and you shouldn't need to hack anything to use the subclass. e.g. Define constructor arguments to keep inheritance flexible. For example, if you have credit card payment and want to add PayPal payment as an option. The difference between the credit card and PayPal payment is that credit card needs a security code and PayPal needs an email to complete the payment. So the payment processors should not have a dependency of security code in itself but instead, it should be required by the credit card subclass of the payment processor and email should be a requirement of the PayPal subclass as well. Interface segregration principle Make interfaces (parent abstract classes) more specific, rather than generic. e.g. Create more interfaces (classes) if needed and/or provide objects to constructors. For example, if some payment method is dependent on SMS authorization but some aren't. So you can't add it directly to the payment processor (this will also break the Liskov substitution principle as well). But instead, you make a new interface that is a subclass of the payment processor that has the SMS authorization ability so the payment method that needs the SMS authorization uses the new subclass instead of the payment processor class. In this way, it will not break the payment method that doesn't have SMS authorization. Another way is to separate the SMS authorization to its class instead of having it inside the payment processor which is a better design choice and use the new SMS auth class in the payment method that needs it. Dependency inversion principle Make classes depend on abstract classes rather than non-abstract classes. e.g. Make classes inherit from abstract classes. For example, if you have created an SMS authorizer class and using it in your payment method class directly and wanted to add another way to authorize then is better to make an authorizer class and make the SMS authorizer to a subclass of the authorizer class instead and use it inside the payment method class in this way is easier to switch between which authorize method you want to use.","title":"SOLID"},{"location":"Software%20Development%20and%20Design/SOLID/#solid","text":"","title":"SOLID"},{"location":"Software%20Development%20and%20Design/SOLID/#solid_1","text":"","title":"S.O.L.I.D"},{"location":"Software%20Development%20and%20Design/SOLID/#single-responsibilty","text":"Make things (classes, functions, etc.) responsible for fulfilling one type of role. e.g. Refactor code responsibilities into separate classes. For example, if you have a shop and make a purchase. Then the first thing you need is to make an order and then payment. So in this case the order handling like what item and how many and what price can be part of the order class but the payment should be separated from the order class. This is because if you example you want to add other payment methods to the shop you only need to change the payment class to support additional payment methods.","title":"Single responsibilty"},{"location":"Software%20Development%20and%20Design/SOLID/#open-closed-principle","text":"Be able to add new functionality to existing code easily without modifying existing code. e.g. Use abstract classes. These can define what subclasses will require and strengthen Principle 1. by separating code duties. For example, you have a payment processor to handle payment as a class, so if you want to add a new payment method you create a subclass of the payment processor for that payment option instead of modifying the payment processor class with the payment method.","title":"Open-closed principle"},{"location":"Software%20Development%20and%20Design/SOLID/#liskov-substitution-principle","text":"When a class inherits from another class, the program shouldn't break and you shouldn't need to hack anything to use the subclass. e.g. Define constructor arguments to keep inheritance flexible. For example, if you have credit card payment and want to add PayPal payment as an option. The difference between the credit card and PayPal payment is that credit card needs a security code and PayPal needs an email to complete the payment. So the payment processors should not have a dependency of security code in itself but instead, it should be required by the credit card subclass of the payment processor and email should be a requirement of the PayPal subclass as well.","title":"Liskov substitution principle"},{"location":"Software%20Development%20and%20Design/SOLID/#interface-segregration-principle","text":"Make interfaces (parent abstract classes) more specific, rather than generic. e.g. Create more interfaces (classes) if needed and/or provide objects to constructors. For example, if some payment method is dependent on SMS authorization but some aren't. So you can't add it directly to the payment processor (this will also break the Liskov substitution principle as well). But instead, you make a new interface that is a subclass of the payment processor that has the SMS authorization ability so the payment method that needs the SMS authorization uses the new subclass instead of the payment processor class. In this way, it will not break the payment method that doesn't have SMS authorization. Another way is to separate the SMS authorization to its class instead of having it inside the payment processor which is a better design choice and use the new SMS auth class in the payment method that needs it.","title":"Interface segregration principle"},{"location":"Software%20Development%20and%20Design/SOLID/#dependency-inversion-principle","text":"Make classes depend on abstract classes rather than non-abstract classes. e.g. Make classes inherit from abstract classes. For example, if you have created an SMS authorizer class and using it in your payment method class directly and wanted to add another way to authorize then is better to make an authorizer class and make the SMS authorizer to a subclass of the authorizer class instead and use it inside the payment method class in this way is easier to switch between which authorize method you want to use.","title":"Dependency inversion principle"},{"location":"Software%20Development%20and%20Design/Scalabilty/","text":"#scalability #needtofix #scalling Scalability Different types of scalability: Administrative scalability The ability for an increasing number of organizations or users to access a system. Functional scalability The ability to enhance the system by adding new functionality without disrupting existing activities. Geographic scalability The ability to maintain effectiveness during expansion from a local area to a larger region. Load scalability The ability for a distributed system to expand and contract to accommodate heavier or lighter loads, including, the ease with which a system or component can be modified, added, or removed, to accommodate changing loads. Generation scalability : The ability of a system to scale by adopting new generations of components. Heterogeneous scalability Is the ability to adapt components from different vendors. Source: [wikipedia](https://en.wikipedia.org/wiki/Scalability#Dimensions) Need to fix the text above with more and clearer information Scaling vertically Adding more resources to the same single node. Often used for Monolith applications . Cons Need to take the server down to add new resources like ram, HDD, CPU Scaling horizontally Adding more nodes Hybrid model Use both vertically and horizontally scaling","title":"Scalabilty"},{"location":"Software%20Development%20and%20Design/Scalabilty/#scalability","text":"Different types of scalability:","title":"Scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#administrative-scalability","text":"The ability for an increasing number of organizations or users to access a system.","title":"Administrative scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#functional-scalability","text":"The ability to enhance the system by adding new functionality without disrupting existing activities.","title":"Functional scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#geographic-scalability","text":"The ability to maintain effectiveness during expansion from a local area to a larger region.","title":"Geographic scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#load-scalability","text":"The ability for a distributed system to expand and contract to accommodate heavier or lighter loads, including, the ease with which a system or component can be modified, added, or removed, to accommodate changing loads.","title":"Load scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#generation-scalability","text":"The ability of a system to scale by adopting new generations of components.","title":"Generation scalability:"},{"location":"Software%20Development%20and%20Design/Scalabilty/#heterogeneous-scalability","text":"Is the ability to adapt components from different vendors. Source: [wikipedia](https://en.wikipedia.org/wiki/Scalability#Dimensions) Need to fix the text above with more and clearer information","title":"Heterogeneous scalability"},{"location":"Software%20Development%20and%20Design/Scalabilty/#scaling-vertically","text":"Adding more resources to the same single node. Often used for Monolith applications .","title":"Scaling vertically"},{"location":"Software%20Development%20and%20Design/Scalabilty/#cons","text":"Need to take the server down to add new resources like ram, HDD, CPU","title":"Cons"},{"location":"Software%20Development%20and%20Design/Scalabilty/#scaling-horizontally","text":"Adding more nodes","title":"Scaling horizontally"},{"location":"Software%20Development%20and%20Design/Scalabilty/#hybrid-model","text":"Use both vertically and horizontally scaling","title":"Hybrid model"},{"location":"Software%20Development%20and%20Design/Service-oriented/","text":"Service-oriented Also know as SOA. #needtofix more information Use Enterprise Service Bus (ESB)","title":"Service-oriented"},{"location":"Software%20Development%20and%20Design/Service-oriented/#service-oriented","text":"Also know as SOA. #needtofix more information Use Enterprise Service Bus (ESB)","title":"Service-oriented"},{"location":"Software%20Development%20and%20Design/UML/","text":"","title":"UML"},{"location":"Software%20Development%20and%20Design/rate-limit/","text":"#rate-limit #ddos Rate-limit Types of rate-limit REST API-calls Return HTTP code 429 when the end-user/client is making too many requests to let them know that the resource is busy right now. Network traffic Is important to have a rate-limit so it can lower the burden for network devices and servers during DDoS attacks. User interaction Stop brute-force attacks, example limit login attempts to three in an hour so they can't use brute-force attacks to figure out the password. Data protection Do not allow frequent calls to extract data, so it's harder to use web-scrapping.","title":"Rate limit"},{"location":"Software%20Development%20and%20Design/rate-limit/#rate-limit","text":"","title":"Rate-limit"},{"location":"Software%20Development%20and%20Design/rate-limit/#types-of-rate-limit","text":"","title":"Types of rate-limit"},{"location":"Software%20Development%20and%20Design/rate-limit/#rest-api-calls","text":"Return HTTP code 429 when the end-user/client is making too many requests to let them know that the resource is busy right now.","title":"REST API-calls"},{"location":"Software%20Development%20and%20Design/rate-limit/#network-traffic","text":"Is important to have a rate-limit so it can lower the burden for network devices and servers during DDoS attacks.","title":"Network traffic"},{"location":"Software%20Development%20and%20Design/rate-limit/#user-interaction","text":"Stop brute-force attacks, example limit login attempts to three in an hour so they can't use brute-force attacks to figure out the password.","title":"User interaction"},{"location":"Software%20Development%20and%20Design/rate-limit/#data-protection","text":"Do not allow frequent calls to extract data, so it's harder to use web-scrapping.","title":"Data protection"},{"location":"Software%20Development%20and%20Design/software_dev_design/","text":"Index of Software Development and Design [[Load balancer]] [[Modular]] [[Scalabilty]] [[Monolith applications]] [[Latency]] [[Pagination]]","title":"Index of Software Development and Design"},{"location":"Software%20Development%20and%20Design/software_dev_design/#index-of-software-development-and-design","text":"[[Load balancer]] [[Modular]] [[Scalabilty]] [[Monolith applications]] [[Latency]] [[Pagination]]","title":"Index of Software Development and Design"},{"location":"Using%20APIs/API/","text":"#api API General Two types of API calls, synchronous and asynchronous. Synchronous The client makes a call and waits for a response before proceeding Asynchronous The client make a call and the API response back that it received that call but not if it was successful or not, the client need to request that information later. Retries Use backoff timer for making retries to an API. If you don't use the backoff timer and make retries all the time till it works it will make the server loads higher and worst-case DoS-attack without knowing that. In some case if the API have rate-limit it will response back with HTTP 429 code . Sometimes some APIs use \"X-Rate-Limit-Remaining\" and \"X-Rate-Limit-Reset\" in a response header to inform you about the status of retries. In Webex API they are using the \"Retry-After\" header in the response when getting HTTP code 429 to inform you about when you can try next time.","title":"API"},{"location":"Using%20APIs/API/#api","text":"","title":"API"},{"location":"Using%20APIs/API/#general","text":"Two types of API calls, synchronous and asynchronous.","title":"General"},{"location":"Using%20APIs/API/#synchronous","text":"The client makes a call and waits for a response before proceeding","title":"Synchronous"},{"location":"Using%20APIs/API/#asynchronous","text":"The client make a call and the API response back that it received that call but not if it was successful or not, the client need to request that information later.","title":"Asynchronous"},{"location":"Using%20APIs/API/#retries","text":"Use backoff timer for making retries to an API. If you don't use the backoff timer and make retries all the time till it works it will make the server loads higher and worst-case DoS-attack without knowing that. In some case if the API have rate-limit it will response back with HTTP 429 code . Sometimes some APIs use \"X-Rate-Limit-Remaining\" and \"X-Rate-Limit-Reset\" in a response header to inform you about the status of retries. In Webex API they are using the \"Retry-After\" header in the response when getting HTTP code 429 to inform you about when you can try next time.","title":"Retries"},{"location":"Using%20APIs/Backoff%20timer/","text":"Backoff timer General Backoff timers are created by using these three parameters: connection timeout, initial wait time, and wait rest time. Start by using the initial wait time and double it after each timeout until it reaches wait reset time when it's reset back to the initial value. Is important to think about which type of API call you using also because if you use a POST request and retry too much time it's a risk that you will create multiple entries instead of one. So in that case add a check to make sure that the object doesn't exist before testing again.","title":"Backoff timer"},{"location":"Using%20APIs/Backoff%20timer/#backoff-timer","text":"","title":"Backoff timer"},{"location":"Using%20APIs/Backoff%20timer/#general","text":"Backoff timers are created by using these three parameters: connection timeout, initial wait time, and wait rest time. Start by using the initial wait time and double it after each timeout until it reaches wait reset time when it's reset back to the initial value. Is important to think about which type of API call you using also because if you use a POST request and retry too much time it's a risk that you will create multiple entries instead of one. So in that case add a check to make sure that the object doesn't exist before testing again.","title":"General"},{"location":"Using%20APIs/HTTP%20Codes/","text":"HTTP Codes 1xx 2xx 3xx 304 Not Modified 4xx 429 Too many request 5xx","title":"HTTP Codes"},{"location":"Using%20APIs/HTTP%20Codes/#http-codes","text":"","title":"HTTP Codes"},{"location":"Using%20APIs/HTTP%20Codes/#1xx","text":"","title":"1xx"},{"location":"Using%20APIs/HTTP%20Codes/#2xx","text":"","title":"2xx"},{"location":"Using%20APIs/HTTP%20Codes/#3xx","text":"","title":"3xx"},{"location":"Using%20APIs/HTTP%20Codes/#304","text":"Not Modified","title":"304"},{"location":"Using%20APIs/HTTP%20Codes/#4xx","text":"","title":"4xx"},{"location":"Using%20APIs/HTTP%20Codes/#429","text":"Too many request","title":"429"},{"location":"Using%20APIs/HTTP%20Codes/#5xx","text":"","title":"5xx"},{"location":"Using%20APIs/HTTP%20Header/","text":"HTTP header Headers Cache-Control Often use cache headers. no-store The response may not be stored in any cache no-cache Allow caching but stored response need to be validated first before use. max-age Time in seconds a cached copy is valid. public Can be cached by anyone. private Only browser/client may cache. Example Cache-Control: no-cache, max-age=10","title":"HTTP header"},{"location":"Using%20APIs/HTTP%20Header/#http-header","text":"","title":"HTTP header"},{"location":"Using%20APIs/HTTP%20Header/#headers","text":"","title":"Headers"},{"location":"Using%20APIs/HTTP%20Header/#cache-control","text":"Often use cache headers.","title":"Cache-Control"},{"location":"Using%20APIs/HTTP%20Header/#no-store","text":"The response may not be stored in any cache","title":"no-store"},{"location":"Using%20APIs/HTTP%20Header/#no-cache","text":"Allow caching but stored response need to be validated first before use.","title":"no-cache"},{"location":"Using%20APIs/HTTP%20Header/#max-age","text":"Time in seconds a cached copy is valid.","title":"max-age"},{"location":"Using%20APIs/HTTP%20Header/#public","text":"Can be cached by anyone.","title":"public"},{"location":"Using%20APIs/HTTP%20Header/#private","text":"Only browser/client may cache.","title":"private"},{"location":"Using%20APIs/HTTP%20Header/#example","text":"Cache-Control: no-cache, max-age=10","title":"Example"},{"location":"Using%20APIs/HTTP%20Request/","text":"HTTP Request Safe methods Safe means read object GET Unsafe methods Unsafe means available to write an object PUT DELETE POST UPDATE","title":"HTTP Request"},{"location":"Using%20APIs/HTTP%20Request/#http-request","text":"","title":"HTTP Request"},{"location":"Using%20APIs/HTTP%20Request/#safe-methods","text":"Safe means read object","title":"Safe methods"},{"location":"Using%20APIs/HTTP%20Request/#get","text":"","title":"GET"},{"location":"Using%20APIs/HTTP%20Request/#unsafe-methods","text":"Unsafe means available to write an object","title":"Unsafe methods"},{"location":"Using%20APIs/HTTP%20Request/#put","text":"","title":"PUT"},{"location":"Using%20APIs/HTTP%20Request/#delete","text":"","title":"DELETE"},{"location":"Using%20APIs/HTTP%20Request/#post","text":"","title":"POST"},{"location":"Using%20APIs/HTTP%20Request/#update","text":"","title":"UPDATE"},{"location":"Using%20APIs/OAuth2/","text":"OAuth2 Resource owner The end user. Clients Is often the application that is requesting access on the behalf of the resource owner . Confidential Client Like web-application, is more safer to store the client_key and client_secret Public Clients Like Mobile phone , webbrowser. They can't be trusted with the secret , easier to hijack the client secrets. Authorization server The server that handle the authorization Two-legged authorization More likely to be used by machine to machine. The flow is only between the authorization server and the client without the resource owner . Grant types Client credentials \"The Client Credentials grant type is used by clients to obtain an access token outside of the context of a user. This is typically used by clients to access resources about themselves rather than to access a user's resources.\" Resource Owner Credential Providing username and password for the resource owner Implicit Three-legged authorization Use All three blocks : Resource owner Clients Authorization server Grant types Authorization code \"The Authorization Code grant type is used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the redirect URL, the application will get the authorization code from the URL and use it to request an access token.\" Resource https://oauth.net/2/grant-types/","title":"OAuth2"},{"location":"Using%20APIs/OAuth2/#oauth2","text":"","title":"OAuth2"},{"location":"Using%20APIs/OAuth2/#resource-owner","text":"The end user.","title":"Resource owner"},{"location":"Using%20APIs/OAuth2/#clients","text":"Is often the application that is requesting access on the behalf of the resource owner .","title":"Clients"},{"location":"Using%20APIs/OAuth2/#confidential-client","text":"Like web-application, is more safer to store the client_key and client_secret","title":"Confidential Client"},{"location":"Using%20APIs/OAuth2/#public-clients","text":"Like Mobile phone , webbrowser. They can't be trusted with the secret , easier to hijack the client secrets.","title":"Public Clients"},{"location":"Using%20APIs/OAuth2/#authorization-server","text":"The server that handle the authorization","title":"Authorization server"},{"location":"Using%20APIs/OAuth2/#two-legged-authorization","text":"More likely to be used by machine to machine. The flow is only between the authorization server and the client without the resource owner .","title":"Two-legged authorization"},{"location":"Using%20APIs/OAuth2/#grant-types","text":"","title":"Grant types"},{"location":"Using%20APIs/OAuth2/#client-credentials","text":"\"The Client Credentials grant type is used by clients to obtain an access token outside of the context of a user. This is typically used by clients to access resources about themselves rather than to access a user's resources.\"","title":"Client credentials"},{"location":"Using%20APIs/OAuth2/#resource-owner-credential","text":"Providing username and password for the resource owner","title":"Resource Owner Credential"},{"location":"Using%20APIs/OAuth2/#implicit","text":"","title":"Implicit"},{"location":"Using%20APIs/OAuth2/#three-legged-authorization","text":"Use All three blocks : Resource owner Clients Authorization server","title":"Three-legged authorization"},{"location":"Using%20APIs/OAuth2/#grant-types_1","text":"","title":"Grant types"},{"location":"Using%20APIs/OAuth2/#authorization-code","text":"\"The Authorization Code grant type is used by confidential and public clients to exchange an authorization code for an access token. After the user returns to the client via the redirect URL, the application will get the authorization code from the URL and use it to request an access token.\"","title":"Authorization code"},{"location":"Using%20APIs/OAuth2/#resource","text":"https://oauth.net/2/grant-types/","title":"Resource"},{"location":"Using%20APIs/using_api/","text":"Index of Using API","title":"Index of Using API"},{"location":"Using%20APIs/using_api/#index-of-using-api","text":"","title":"Index of Using API"}]}